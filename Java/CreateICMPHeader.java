import java.awt.* ;
import java.awt.event.* ;
import javax.swing.* ;

public class CreateICMPHeader extends JFrame implements ActionListener {
	private JTextField type, code, checksum, identifier, seq ;
	private JButton create, reset ;
	private ICMPHeader icmphdr = null ;
	EthernetHeader ethheader;
	IPHeader ipheader ;

	public CreateICMPHeader (EthernetHeader ethhdr, IPHeader iphdr) {
		super ( "Create ICMP Header.." );
		ethheader = ethhdr ;
		ipheader = iphdr ;		
		JPanel first2bytes_label = new JPanel ( ) ;
		first2bytes_label.setLayout( new BoxLayout ( first2bytes_label , BoxLayout.X_AXIS ) );
		JLabel type_label = new JLabel ( "Type" ) ; 
		JLabel code_label = new JLabel ( "Code" ) ; 
		JLabel checksum_label = new JLabel ( "Checksum" ) ;
		first2bytes_label.add ( Box.createHorizontalStrut(20) ) ;
		first2bytes_label.add ( type_label ) ;
		first2bytes_label.add ( Box.createHorizontalStrut(70) ) ;
		first2bytes_label.add ( code_label ) ;
		first2bytes_label.add ( Box.createHorizontalStrut(110) ) ;
		first2bytes_label.add ( checksum_label ) ;
		first2bytes_label.add ( Box.createHorizontalStrut(50) ) ;
		
		JPanel first2bytes = new JPanel ( ) ;
		first2bytes.setLayout( new BoxLayout ( first2bytes , BoxLayout.X_AXIS ) );
		type = new JTextField (6) ; 
		code = new JTextField (6) ;
		checksum = new JTextField (15) ;
		checksum.setText ( "To be generated by computer!" ) ;
		checksum.setEditable(false) ;
		first2bytes.add ( Box.createHorizontalStrut(20) ) ;
		first2bytes.add ( type ) ;
		first2bytes.add ( Box.createHorizontalStrut(10) ) ;
		first2bytes.add ( code ) ;
		first2bytes.add ( Box.createHorizontalStrut(11) ) ;
		first2bytes.add ( checksum ) ;
		first2bytes.add ( Box.createHorizontalStrut(20) ) ;
		
		JPanel last2bytes_label = new JPanel ( ) ;
		last2bytes_label.setLayout( new BoxLayout ( last2bytes_label , BoxLayout.X_AXIS ) );
		JLabel identifier_label = new JLabel ( "Identifier" ) ; 
		JLabel seq_label = new JLabel ( "Sequence Number" ) ; 
		last2bytes_label.add ( Box.createHorizontalStrut(50) ) ;
		last2bytes_label.add ( identifier_label ) ;
		last2bytes_label.add ( Box.createHorizontalStrut(130) ) ;
		last2bytes_label.add ( seq_label ) ;
		last2bytes_label.add ( Box.createHorizontalStrut(10) ) ;
		
		JPanel last2bytes = new JPanel ( ) ;
		last2bytes.setLayout( new BoxLayout ( last2bytes , BoxLayout.X_AXIS ) );
		identifier = new JTextField () ; 
		seq = new JTextField () ; 
		last2bytes.add ( Box.createHorizontalStrut(20) ) ;
		last2bytes.add ( identifier ) ;
		last2bytes.add ( Box.createHorizontalStrut(11) ) ;
		last2bytes.add ( seq ) ;
		last2bytes.add ( Box.createHorizontalStrut(20) ) ;

		JPanel buttonPanel = new JPanel ( ) ;
    	buttonPanel.setLayout( new BoxLayout ( buttonPanel , BoxLayout.X_AXIS ) ) ;
    	create = new JButton ( "Send") ;
    	create.addActionListener( this ) ;
    	buttonPanel.add( Box.createHorizontalGlue() ) ;
    	buttonPanel.add( create ) ;
  		buttonPanel.add( Box.createHorizontalStrut( 15 ) ) ;
    	reset = new JButton ( "Reset" ) ;
    	reset.addActionListener( this ) ;
    	buttonPanel.add( reset ) ;    
  		buttonPanel.add( Box.createHorizontalStrut( 20 ) ) ;
  		
  		JPanel intermediatePanel = new JPanel ( ) ;
		intermediatePanel.setLayout( new BoxLayout ( intermediatePanel, BoxLayout.Y_AXIS ) ) ;
		intermediatePanel.add( Box.createVerticalStrut( 20 ) ) ;
		intermediatePanel.add( first2bytes_label ) ;
		intermediatePanel.add( Box.createVerticalStrut( 5 ) ) ;
		intermediatePanel.add( first2bytes ) ;
		intermediatePanel.add( Box.createVerticalStrut( 20 ) ) ;
		intermediatePanel.add( last2bytes_label ) ;	
		intermediatePanel.add( Box.createVerticalStrut( 5 ) ) ;
		intermediatePanel.add( last2bytes ) ;
		intermediatePanel.add( Box.createVerticalStrut( 20 ) ) ;	
		intermediatePanel.add( buttonPanel ) ;	
		intermediatePanel.add( Box.createVerticalStrut( 10 ) ) ;
		
		Container c = getContentPane() ; 
		c.setLayout( new BorderLayout ( ) ) ;
		c.add ( intermediatePanel ) ;
 	
		setResizable ( false ) ;
		setLocation ( 180 , 100 ) ;
		setSize ( 450 , 230 ) ; 
		setVisible ( true ) ;	
	
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		WindowListener wl = new WindowAdapter() {
	  	  public void windowClosing(WindowEvent we) {
	      	((Window) we.getSource()).dispose();
	  	  }
		};
		this.addWindowListener(wl);		
	}

	public boolean isValidNumber (String num) {
		try {
			int number = Integer.parseInt (num) ;
			if ( number < 0 ) {
				JOptionPane.showMessageDialog ( null, "Wrong input given : Input number : " + num ) ;
				return false ;
			}
		}catch ( Exception exp ) {
			JOptionPane.showMessageDialog ( null, "Number format Exception : Input number : " + num ) ;
			return false ;
		}
		return true ;
	}

	public void actionPerformed (ActionEvent ae) {
		if ( ae.getSource() == reset ) {
			type.setText("") ;
			code.setText("");
			identifier.setText("");
			seq.setText("") ;
		} else if ( ae.getSource() == create ) {
			String str ;
			if ( (str=type.getText().trim()).equals("") ) {
				JOptionPane.showMessageDialog ( null, "Type field cannot be empty!" ) ;
				return ;
			} else if ( !isValidNumber(str) ) {
				JOptionPane.showMessageDialog ( null, "Source Port number is not valid!" ) ;
				return ;
			} else if ( (str=code.getText().trim()).equals("") ) {
				JOptionPane.showMessageDialog ( null, "code field cannot be empty!" ) ;
				return ;
			} else if ( !isValidNumber(str) ) {
				JOptionPane.showMessageDialog ( null, "code number is not valid!" ) ;
				return ;
			} else if ( (str=identifier.getText().trim()).equals("") ) {
				JOptionPane.showMessageDialog ( null, "identifier field cannot be empty!" ) ;
				return ;
			} else if ( !isValidNumber(str) ) {
				JOptionPane.showMessageDialog ( null, "identifier number is not valid!" ) ;
				return ;
			} else if ( (str=seq.getText().trim()).equals("") ) {
				JOptionPane.showMessageDialog ( null, "Sequence field cannot be empty!" ) ;
				return ;
			} else if ( !isValidNumber(str) ) {
				JOptionPane.showMessageDialog ( null, "Sequence number is not valid!" ) ;
				return ;
			}
			icmphdr = new ICMPHeader () ;
			icmphdr.setType ( Integer.parseInt(type.getText().trim())) ;
			icmphdr.setCode ( Integer.parseInt(code.getText().trim())) ;
			icmphdr.setID ( Integer.parseInt(identifier.getText().trim())) ;
			icmphdr.setSequenceNumber ( Integer.parseInt(seq.getText().trim())) ;
//			ethheader.showEthernetHeader () ;
//			ipheader.showIPHeader () ;
			icmphdr.showICMPHeader () ;
			sendMessageToNetwork_ICMP (ethheader.getSourceMACAddress(), ethheader.getDestinationMACAddress(), ethheader.getProtocol(), ipheader.getTOS(), ipheader.getID(), ipheader.getFlag(), ipheader.getOffset(), ipheader.getTimetoLive(), ipheader.getProtocol(), ipheader.getSourceIPAddress(), ipheader.getDestinationIPAddress(), icmphdr.getType(), icmphdr.getCode(), icmphdr.getSequenceNumber(), icmphdr.getID()) ;
		}
	}

	public native void sendMessageToNetwork_ICMP (String src, String dst, String type, int tos, int id, int flag, int offset, int ttl, String proto, String src_ip, String dst_ip, int type_icmp, int code, int seq, int id_icmp) ;

	static {
		System.loadLibrary ("SendPacket_ICMP") ;
	}

	public static void main (String[] args) {
		CreateICMPHeader hdr = new CreateICMPHeader (null,null) ;
	}
}
